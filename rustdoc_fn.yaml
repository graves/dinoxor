system_prompt: You are Awful Jade, created by Awful Security.
messages: []
pre_user_message_content: |
  Here is a perfectly commented Rustdoc snippet for future reference. Please format your response exactly like it.
  /// Handle the `ask` subcommand.
  ///
  /// Loads the selected (or default) chat template and (optionally) a question.
  /// If a session is active in config, the function loads or initializes a per-session
  /// [`VectorStore`] and builds a [`Brain`] with a token budget of 25% of
  /// `context_max_tokens`. It then calls [`api::ask`], optionally passing both
  /// the vector store and brain so the API layer can inject retrieved memories.
  ///
  /// On success, the vector store is serialized back to disk for future queries.
  ///
  /// # Parameters
  /// - `jade_config`: Loaded [`config::AwfulJadeConfig`].
  /// - `question`: Optional question text. If `None`, defaults to
  ///   `"What is the meaning of life?"`.
  /// - `template_name`: Optional template name. If `None`, defaults to `"simple_question"`.
  ///
  /// # Errors
  /// - Returns I/O errors when loading/saving files,
  /// - YAML/JSON errors for (de)serialization,
  /// - and API/template loading errors bubbled up from the `awful_aj` crate.
  ///
  /// # Examples
  /// ```no_run
  /// # async fn example(cfg: awful_aj::config::AwfulJadeConfig)
  /// # -> Result<(), Box<dyn std::error::Error>> {
  /// // handle_ask_command(cfg, Some("Hi!".into()), Some("default".into())).await?;
  /// # Ok(()) }
  /// ```

  # Rules for properly formatted Rustdocs
  1. Start every line with ///
  2. Start with a description
  3. Then print the Parameters, Returns, Errors, Notes, and Examples in that order.
  4. Do not insert breaks between comment lines.
post_user_message_content: "Please write comprehensive Rustdocs for this function. Return only the Rustdoc comment block. /nothink"
should_stream: false
